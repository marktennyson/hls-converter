{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"HLS Converter","text":"![HLS Converter Logo](https://via.placeholder.com/300x100/6366f1/white?text=HLS+Converter)  **Professional HLS (HTTP Live Streaming) converter with automatic optimization**  [![Python Version](https://img.shields.io/badge/python-3.8+-blue.svg)](https://python.org) [![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT) [![Documentation](https://img.shields.io/badge/docs-mkdocs-blue.svg)](https://marktennyson.github.io/hls-converter/) [![Code Style: Black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)"},{"location":"#what-is-hls-converter","title":"What is HLS Converter?","text":"<p>HLS Converter is a professional-grade tool for converting video files into HLS (HTTP Live Streaming) format with automatic optimization, hardware acceleration support, and dynamic bitrate adjustment. It transforms any video file into adaptive bitrate streams perfect for web streaming, mobile apps, and content delivery networks.</p> <p>Key Benefits</p> <ul> <li>\ud83d\ude80 Automatic optimization - No manual bitrate calculations needed</li> <li>\u26a1 Hardware acceleration - Uses VideoToolbox, NVENC, QuickSync when available  </li> <li>\ud83c\udfaf Intelligent quality - Dynamic bitrate adjustment based on input video</li> <li>\ud83d\udd27 Developer friendly - Clean Python API and comprehensive CLI</li> </ul>"},{"location":"#quick-example","title":"Quick Example","text":"CLIPython APIConfiguration <pre><code># Convert video with automatic optimization\nhls-converter input.mp4\n\n# Specify quality levels and output directory\nhls-converter input.mp4 --resolutions 720p,1080p --output ./streaming\n\n# List available hardware encoders\nhls-converter --list-encoders\n</code></pre> <pre><code>from hls_converter import HLSConverter\n\n# Basic conversion\nconverter = HLSConverter()\nresults = converter.convert('input.mp4', 'output_directory')\n\nprint(f\"\u2705 Conversion completed!\")\nprint(f\"\ud83d\udccb Master playlist: {results['master_playlist']}\")\nprint(f\"\u26a1 Processing speed: {results['processing_speed_mbps']:.2f} MB/s\")\n</code></pre> <pre><code>from hls_converter import HLSConverter, HLSConfig\n\n# Custom configuration\nconfig = HLSConfig(\n    segment_duration=4,      # 4-second segments\n    preset='medium',         # Better quality\n    max_workers=6,          # Parallel processing\n    convert_subtitles=True  # Include subtitles\n)\n\nconverter = HLSConverter(config)\nresults = converter.convert('movie.mp4', 'streaming_output', ['720p', '1080p'])\n</code></pre>"},{"location":"#key-features","title":"Key Features","text":""},{"location":"#professional-quality","title":"\ud83c\udfac Professional Quality","text":"<ul> <li>Adaptive bitrate streaming with multiple quality levels</li> <li>Dynamic bitrate adjustment based on input video characteristics  </li> <li>Intelligent resolution ladder generation for optimal streaming</li> <li>Audio track preservation with language detection</li> <li>Subtitle conversion to WebVTT format</li> </ul>"},{"location":"#high-performance","title":"\ud83d\ude80 High Performance","text":"<ul> <li>Hardware encoder detection (VideoToolbox, NVENC, QuickSync, VAAPI, AMF)</li> <li>Multi-threaded processing utilizing all CPU cores</li> <li>Optimized FFmpeg parameters for streaming performance</li> <li>Memory-efficient processing for large video files</li> <li>Progress tracking with ETA calculation</li> </ul>"},{"location":"#developer-experience","title":"\ud83d\udee0\ufe0f Developer Experience","text":"<ul> <li>Clean class-based architecture for easy integration</li> <li>Comprehensive CLI with 20+ options and detailed help</li> <li>Rich console logging with beautiful progress bars  </li> <li>JSON configuration support for reproducible builds</li> <li>Extensive documentation and examples</li> </ul>"},{"location":"#cross-platform","title":"\ud83c\udf10 Cross-Platform","text":"<ul> <li>Python 3.8+ support across platforms</li> <li>macOS, Windows, Linux compatibility</li> <li>Hardware acceleration on all major platforms</li> <li>FFmpeg integration with automatic encoder detection</li> </ul>"},{"location":"#output-structure","title":"Output Structure","text":"<p>HLS Converter generates a complete streaming package:</p> <pre><code>output_directory/\n\u251c\u2500\u2500 master.m3u8              # Master playlist (entry point)\n\u251c\u2500\u2500 720p/\n\u2502   \u251c\u2500\u2500 playlist.m3u8        # 720p video playlist\n\u2502   \u251c\u2500\u2500 chunk_000.ts         # Video segments\n\u2502   \u251c\u2500\u2500 chunk_001.ts\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 1080p/\n\u2502   \u251c\u2500\u2500 playlist.m3u8        # 1080p video playlist  \n\u2502   \u251c\u2500\u2500 chunk_000.ts\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 audio_english/\n\u2502   \u251c\u2500\u2500 playlist.m3u8        # English audio playlist\n\u2502   \u251c\u2500\u2500 chunk_000.ts\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 audio_spanish/           # Additional language tracks\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 english.vtt              # Subtitle files\n\u251c\u2500\u2500 spanish.vtt\n\u2514\u2500\u2500 ...\n</code></pre>"},{"location":"#why-choose-hls-converter","title":"Why Choose HLS Converter?","text":"Feature HLS Converter Other Tools Automatic Optimization \u2705 Dynamic bitrate adjustment \u274c Manual configuration required Hardware Acceleration \u2705 Auto-detection &amp; fallback \u26a0\ufe0f Manual setup needed Developer API \u2705 Clean Python classes \u274c Command-line only Progress Tracking \u2705 Rich console with ETA \u274c Basic or no feedback Multi-threading \u2705 Parallel processing \u26a0\ufe0f Single-threaded Documentation \u2705 Comprehensive docs \u274c Minimal documentation Configuration \u2705 JSON + CLI options \u274c Limited options Subtitle Support \u2705 WebVTT conversion \u26a0\ufe0f Basic or missing"},{"location":"#real-world-use-cases","title":"Real-World Use Cases","text":"<p>Web Streaming Platform</p> <p>Convert user uploads to multiple quality levels for adaptive streaming: <pre><code>converter = HLSConverter()\nresults = converter.convert(\n    'user_upload.mp4', \n    f'streams/{video_id}',\n    ['360p', '720p', '1080p']\n)\n</code></pre></p> <p>Mobile App Backend</p> <p>Optimize videos for mobile consumption with smaller segments: <pre><code>config = HLSConfig(segment_duration=2, preset='fast')\nconverter = HLSConverter(config)\nresults = converter.convert('content.mp4', 'mobile_streams')\n</code></pre></p> <p>Batch Processing Pipeline</p> <p>Process multiple videos in a content delivery workflow: <pre><code>def process_video_queue(video_files):\n    converter = HLSConverter()\n    for video_file in video_files:\n        results = converter.convert(video_file, f'cdn/{video_file.stem}')\n        upload_to_cdn(results['master_playlist'])\n</code></pre></p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Ready to start converting videos? Choose your path:</p> <ul> <li> <p> Quick Start</p> <p>Get up and running in 5 minutes with our quick start guide</p> <p> Quick Start</p> </li> <li> <p> Installation</p> <p>Install HLS Converter via pip or from source</p> <p> Installation Guide</p> </li> <li> <p> CLI Reference</p> <p>Explore all command-line options and examples</p> <p> CLI Documentation</p> </li> <li> <p> Python API</p> <p>Integrate HLS conversion into your Python applications</p> <p> API Reference</p> </li> </ul>"},{"location":"#community-support","title":"Community &amp; Support","text":"<ul> <li>\ud83d\udcd6 Documentation: Comprehensive guides and API reference</li> <li>\ud83d\udc1b Bug Reports: GitHub Issues</li> <li>\ud83d\udca1 Feature Requests: GitHub Discussions</li> <li>\ud83e\udd1d Contributing: See our Contributing Guide</li> </ul> **Made with \u2764\ufe0f for the streaming community** *Star this project on [GitHub](https://github.com/marktennyson/hls-converter) if you find it useful!*"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to HLS Converter will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#100-2025-09-xx","title":"[1.0.0] - 2025-09-XX","text":""},{"location":"changelog/#initial-release","title":"\ud83c\udf89 Initial Release","text":""},{"location":"changelog/#added","title":"Added","text":"<p>Core Features - Professional class-based HLS converter architecture - Automatic hardware encoder detection (VideoToolbox, NVENC, QuickSync, VAAPI, AMF) - Dynamic bitrate adjustment based on input video characteristics - Multi-threaded parallel processing for optimal performance - Comprehensive media analysis with FFprobe integration</p> <p>Encoding &amp; Quality - Adaptive bitrate streaming with intelligent resolution ladder generation - Support for 144p to 2160p (4K) video resolutions - Automatic bitrate optimization based on input video quality - Hardware-accelerated encoding with software fallback - Audio track preservation with language detection - Subtitle conversion to WebVTT format</p> <p>CLI Interface - Professional command-line interface with extensive options - Encoder detection and listing (<code>--list-encoders</code>) - Media analysis without conversion (<code>--analyze-only</code>) - JSON configuration file support - Comprehensive help system and usage examples - Debug and quiet modes for different use cases</p> <p>Developer API - Clean, well-documented Python API - Modular architecture with separate components - Rich console logging with progress tracking - Comprehensive error handling and reporting</p> <p>Documentation - Professional MkDocs documentation with Material theme - Comprehensive API reference with examples - Step-by-step installation and quick start guides - CLI reference with all options and examples - Advanced usage patterns and integration examples</p>"},{"location":"changelog/#technical-specifications","title":"Technical Specifications","text":"<p>Supported Input Formats - MP4, MKV, AVI, MOV, M4V and other FFmpeg-supported formats - H.264, H.265, VP9, AV1 video codecs - AAC, MP3, AC3, DTS audio codecs - SRT, ASS, VTT, PGS, DVD subtitle formats</p> <p>Output Format - HLS (HTTP Live Streaming) with M3U8 playlists - MPEG-TS segments with configurable duration - Multi-bitrate adaptive streaming - Audio-only tracks with language support - WebVTT subtitles for text-based tracks</p> <p>System Requirements - Python 3.8+  - FFmpeg 4.0+ with desired encoders - macOS, Windows, Linux support - Hardware acceleration support on compatible systems</p>"},{"location":"changelog/#architecture-improvements","title":"Architecture Improvements","text":"<p>Compared to Legacy Version - \u2705 Class-based architecture vs. procedural functions - \u2705 Dynamic bitrate adjustment vs. hardcoded bitrates - \u2705 Modular components vs. monolithic script - \u2705 Professional CLI vs. basic argument parsing - \u2705 Comprehensive testing vs. no test coverage - \u2705 Package distribution vs. single script file - \u2705 Rich documentation vs. minimal comments - \u2705 Error handling vs. basic exception catching</p>"},{"location":"changelog/#known-limitations","title":"Known Limitations","text":"<ul> <li>Bitmap subtitle formats (PGS, DVD) require manual OCR</li> <li>Some hardware encoders may not be available on all systems</li> <li>Very large files (&gt;50GB) may require increased memory</li> <li>Network storage may impact processing speed</li> </ul> <p>Full Changelog: https://github.com/your-username/hls-converter/commits/v1.0.0</p>"},{"location":"cli/","title":"CLI Reference","text":"<p>The HLS Converter command-line interface provides comprehensive options for video conversion. This reference covers all available commands and options.</p>"},{"location":"cli/#basic-usage","title":"Basic Usage","text":"<pre><code>hls-converter [OPTIONS] INPUT_FILE\n</code></pre>"},{"location":"cli/#command-structure","title":"Command Structure","text":"<pre><code>hls-converter input.mp4 [options]\n             \u2191         \u2191\n       input file   configuration options\n</code></pre>"},{"location":"cli/#global-options","title":"Global Options","text":""},{"location":"cli/#help-and-information","title":"Help and Information","text":""},{"location":"cli/#-help-h","title":"<code>--help</code>, <code>-h</code>","text":"<p>Show help message and exit.</p> <pre><code>hls-converter --help\n</code></pre>"},{"location":"cli/#-version-v","title":"<code>--version</code>, <code>-v</code>","text":"<p>Show program version and exit.</p> <pre><code>hls-converter --version\n# Output: hls-converter 1.0.0\n</code></pre>"},{"location":"cli/#-list-encoders","title":"<code>--list-encoders</code>","text":"<p>List all available video and audio encoders on your system.</p> <pre><code>hls-converter --list-encoders\n</code></pre> <p>Example output: <pre><code>Available Encoders\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 Type  \u2503 Category \u2503 Codec             \u2503 Name                     \u2503 Selected \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 Video \u2502 Hardware \u2502 h264_videotoolbox \u2502 VideoToolbox (macOS)     \u2502 \u2705       \u2502\n\u2502 Video \u2502 Software \u2502 libx264           \u2502 x264 Software            \u2502          \u2502\n\u2502 Audio \u2502 Hardware \u2502 aac_at            \u2502 AudioToolbox AAC (macOS) \u2502 \u2705       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre></p>"},{"location":"cli/#-analyze-only","title":"<code>--analyze-only</code>","text":"<p>Analyze input file without performing conversion. Useful for checking video properties and optimal settings.</p> <pre><code>hls-converter input.mp4 --analyze-only\n</code></pre>"},{"location":"cli/#inputoutput-options","title":"Input/Output Options","text":""},{"location":"cli/#input-file","title":"Input File","text":"<p>Required. Path to the input video file.</p> <pre><code>hls-converter /path/to/video.mp4\nhls-converter \"video with spaces.mov\"\n</code></pre> <p>Supported formats: MP4, MKV, AVI, MOV, M4V, and other FFmpeg-supported formats.</p>"},{"location":"cli/#-output-o","title":"<code>--output</code>, <code>-o</code>","text":"<p>Specify output directory. If not provided, uses input filename without extension.</p> <pre><code># Output to specific directory\nhls-converter input.mp4 --output streaming_files\n\n# Output to current directory with custom name  \nhls-converter input.mp4 --output ./my_stream\n\n# Absolute path\nhls-converter input.mp4 --output /var/www/streams/video1\n</code></pre> <p>Default behavior: - Input: <code>movie.mp4</code> \u2192 Output: <code>movie/</code> - Input: <code>/path/video.mov</code> \u2192 Output: <code>/path/video/</code></p>"},{"location":"cli/#quality-and-resolution-options","title":"Quality and Resolution Options","text":""},{"location":"cli/#-resolutions-r","title":"<code>--resolutions</code>, <code>-r</code>","text":"<p>Comma-separated list of resolutions to generate.</p> <p>Available resolutions: <code>144p</code>, <code>240p</code>, <code>360p</code>, <code>480p</code>, <code>720p</code>, <code>1080p</code>, <code>1440p</code>, <code>2160p</code></p> <pre><code># Mobile-friendly resolutions\nhls-converter input.mp4 --resolutions 360p,480p,720p\n\n# High-quality streaming\nhls-converter input.mp4 --resolutions 720p,1080p,1440p\n\n# Single resolution\nhls-converter input.mp4 --resolutions 1080p\n\n# All available resolutions\nhls-converter input.mp4 --resolutions 144p,240p,360p,480p,720p,1080p,1440p,2160p\n</code></pre> <p>Automatic Resolution Selection</p> <p>If <code>--resolutions</code> is not specified, HLS Converter automatically selects optimal resolutions based on your input video:</p> <ul> <li>4K input \u2192 <code>480p,720p,1080p,1440p,2160p</code></li> <li>1080p input \u2192 <code>360p,480p,720p,1080p</code></li> <li>720p input \u2192 <code>240p,360p,480p,720p</code></li> </ul>"},{"location":"cli/#-preset-p","title":"<code>--preset</code>, <code>-p</code>","text":"<p>Encoding speed vs quality preset.</p> <p>Available presets: <code>ultrafast</code>, <code>superfast</code>, <code>veryfast</code>, <code>faster</code>, <code>fast</code>, <code>medium</code>, <code>slow</code>, <code>slower</code>, <code>veryslow</code></p> <pre><code># Fastest encoding (lower quality)\nhls-converter input.mp4 --preset ultrafast\n\n# Balanced speed/quality (default)\nhls-converter input.mp4 --preset fast\n\n# Best quality (slower encoding)\nhls-converter input.mp4 --preset slow\n</code></pre> <p>Preset Comparison:</p> Preset Speed Quality Use Case <code>ultrafast</code> \u26a1\u26a1\u26a1\u26a1\u26a1 \u2b50\u2b50 Quick previews, testing <code>fast</code> \u26a1\u26a1\u26a1\u26a1 \u2b50\u2b50\u2b50\u2b50 Default, good balance <code>medium</code> \u26a1\u26a1\u26a1 \u2b50\u2b50\u2b50\u2b50\u2b50 Web streaming <code>slow</code> \u26a1\u26a1 \u2b50\u2b50\u2b50\u2b50\u2b50\u2b50 Archive quality"},{"location":"cli/#-crf","title":"<code>--crf</code>","text":"<p>Constant Rate Factor for software encoding. Lower values = better quality.</p> <p>Range: <code>0-51</code> (default: <code>23</code>)</p> <pre><code># Higher quality (larger files)\nhls-converter input.mp4 --crf 18\n\n# Standard quality  \nhls-converter input.mp4 --crf 23\n\n# Lower quality (smaller files)\nhls-converter input.mp4 --crf 28\n</code></pre> <p>CRF Guidelines: - <code>18-22</code>: Visually lossless quality - <code>23-25</code>: High quality (default range) - <code>26-30</code>: Standard quality - <code>31+</code>: Lower quality, smaller files</p>"},{"location":"cli/#performance-options","title":"Performance Options","text":""},{"location":"cli/#-workers-w","title":"<code>--workers</code>, <code>-w</code>","text":"<p>Number of parallel processing workers.</p> <pre><code># Use 4 parallel workers\nhls-converter input.mp4 --workers 4\n\n# Use all available CPU cores minus 1 (auto-detected)\nhls-converter input.mp4  # Default behavior\n\n# Single-threaded processing\nhls-converter input.mp4 --workers 1\n</code></pre> <p>Guidelines: - Default: Auto-detects optimal workers (usually CPU cores - 1) - High-end systems: Can handle 6-8 workers - Limited memory: Use 2-4 workers - Network storage: Reduce workers to 2-3</p>"},{"location":"cli/#-segment-duration","title":"<code>--segment-duration</code>","text":"<p>HLS segment duration in seconds.</p> <pre><code># 2-second segments (better seeking, more files)\nhls-converter input.mp4 --segment-duration 2\n\n# 6-second segments (better compression, fewer files)  \nhls-converter input.mp4 --segment-duration 6\n\n# 10-second segments (lowest overhead)\nhls-converter input.mp4 --segment-duration 10\n</code></pre> <p>Duration Trade-offs:</p> Duration Seeking Compression Network Files 2s \u26a1 Fast \ud83d\udcca Lower \ud83c\udf10 Better \ud83d\udcc1 More 6s \u26a1 Medium \ud83d\udcca Better \ud83c\udf10 Medium \ud83d\udcc1 Medium 10s \u26a1 Slower \ud83d\udcca Best \ud83c\udf10 Higher latency \ud83d\udcc1 Fewer <p>Recommendations: - Live streaming: 2-4 seconds - VOD streaming: 4-6 seconds - Archive/download: 6-10 seconds</p>"},{"location":"cli/#-gop-size","title":"<code>--gop-size</code>","text":"<p>Group of Pictures (GOP) size. Affects seeking precision and compression.</p> <pre><code># Better seeking (more keyframes)\nhls-converter input.mp4 --gop-size 30\n\n# Default (balanced)\nhls-converter input.mp4 --gop-size 48\n\n# Better compression (fewer keyframes)  \nhls-converter input.mp4 --gop-size 120\n</code></pre> <p>GOP Size Guidelines: - 30 frames: Better seeking, larger files - 48 frames: Good balance (default) - 120 frames: Better compression, less precise seeking</p>"},{"location":"cli/#audio-and-subtitle-options","title":"Audio and Subtitle Options","text":""},{"location":"cli/#-no-subtitles","title":"<code>--no-subtitles</code>","text":"<p>Skip subtitle conversion entirely.</p> <pre><code>hls-converter input.mp4 --no-subtitles\n</code></pre>"},{"location":"cli/#-include-bitmap-subtitles","title":"<code>--include-bitmap-subtitles</code>","text":"<p>Include bitmap subtitle formats (PGS, DVD). Usually skipped because they require OCR.</p> <pre><code>hls-converter input.mp4 --include-bitmap-subtitles\n</code></pre> <p>Bitmap Subtitles</p> <p>Bitmap subtitles (PGS, DVD) cannot be directly converted to WebVTT text format. This option will attempt conversion but may fail or produce empty subtitle files.</p>"},{"location":"cli/#configuration-options","title":"Configuration Options","text":""},{"location":"cli/#-config-c","title":"<code>--config</code>, <code>-c</code>","text":"<p>Load settings from JSON configuration file.</p> <pre><code>hls-converter input.mp4 --config my_settings.json\n</code></pre> <p>Example configuration file: <pre><code>{\n  \"segment_duration\": 4,\n  \"preset\": \"medium\",\n  \"crf\": 20,\n  \"max_workers\": 6,\n  \"convert_subtitles\": true,\n  \"bitrate_profiles\": [\n    {\n      \"name\": \"720p\",\n      \"resolution\": [1280, 720],\n      \"max_bitrate_kbps\": 2500,\n      \"min_bitrate_kbps\": 1800\n    }\n  ]\n}\n</code></pre></p>"},{"location":"cli/#-save-config","title":"<code>--save-config</code>","text":"<p>Save current settings to JSON file for reuse.</p> <pre><code># Save current settings\nhls-converter input.mp4 --preset medium --crf 20 --save-config my_settings.json\n\n# Later, reuse the settings\nhls-converter another_video.mp4 --config my_settings.json\n</code></pre> <p>Configuration Priority</p> <p>Settings are applied in this order (later overrides earlier): 1. Default settings 2. Configuration file (<code>--config</code>) 3. Command-line arguments</p>"},{"location":"cli/#logging-options","title":"Logging Options","text":""},{"location":"cli/#-quiet-q","title":"<code>--quiet</code>, <code>-q</code>","text":"<p>Reduce output verbosity. Shows only essential information.</p> <pre><code>hls-converter input.mp4 --quiet\n</code></pre>"},{"location":"cli/#-debug","title":"<code>--debug</code>","text":"<p>Enable detailed debug logging. Shows FFmpeg commands, detailed progress, and error traces.</p> <pre><code>hls-converter input.mp4 --debug\n</code></pre> <p>Debug output includes: - FFmpeg command lines - Encoder detection details - Detailed timing information - Full error stack traces - Step-by-step progress</p>"},{"location":"cli/#practical-examples","title":"Practical Examples","text":""},{"location":"cli/#quick-conversion-examples","title":"Quick Conversion Examples","text":"Basic UsageQuality OptimizationMobile OptimizationPerformance Tuning <pre><code># Convert with automatic settings\nhls-converter movie.mp4\n\n# Convert to specific directory\nhls-converter movie.mp4 --output ./streaming\n\n# Convert with custom resolutions\nhls-converter movie.mp4 --resolutions 720p,1080p\n</code></pre> <pre><code># High quality for archive\nhls-converter movie.mp4 --preset slow --crf 18\n\n# Fast conversion for testing\nhls-converter movie.mp4 --preset ultrafast\n\n# Balanced quality/speed\nhls-converter movie.mp4 --preset medium --crf 21\n</code></pre> <pre><code># Mobile-friendly streaming\nhls-converter movie.mp4 \\\n  --resolutions 240p,360p,480p,720p \\\n  --segment-duration 2 \\\n  --preset fast\n\n# Data-conscious settings  \nhls-converter movie.mp4 \\\n  --resolutions 240p,360p,480p \\\n  --crf 26\n</code></pre> <pre><code># Maximum performance (if hardware allows)\nhls-converter movie.mp4 --workers 8 --preset ultrafast\n\n# Conservative resource usage\nhls-converter movie.mp4 --workers 2 --preset fast\n\n# Memory-constrained systems\nhls-converter movie.mp4 --workers 1 --segment-duration 10\n</code></pre>"},{"location":"cli/#advanced-workflows","title":"Advanced Workflows","text":"Batch ProcessingConfiguration ManagementTesting and Analysis <pre><code># Convert all MP4 files\nfor file in *.mp4; do\n  hls-converter \"$file\" --output \"hls_${file%.mp4}\" \\\n    --resolutions 720p,1080p \\\n    --preset medium\ndone\n</code></pre> <pre><code># Create reusable configuration\nhls-converter sample.mp4 \\\n  --preset medium \\\n  --segment-duration 4 \\\n  --resolutions 720p,1080p,1440p \\\n  --save-config production.json \\\n  --analyze-only  # Don't actually convert\n\n# Use configuration for production\nhls-converter movie1.mp4 --config production.json\nhls-converter movie2.mp4 --config production.json\n</code></pre> <pre><code># Analyze video without conversion\nhls-converter movie.mp4 --analyze-only\n\n# Check encoder capabilities\nhls-converter --list-encoders\n\n# Test with debug information\nhls-converter sample.mp4 --debug --resolutions 720p\n</code></pre>"},{"location":"cli/#exit-codes","title":"Exit Codes","text":"<p>The CLI returns different exit codes for scripting:</p> Code Meaning <code>0</code> Success <code>1</code> General error (file not found, conversion failed) <code>2</code> Invalid arguments <code>130</code> Interrupted by user (Ctrl+C) <p>Example usage in scripts: <pre><code>if hls-converter movie.mp4 --quiet; then\n  echo \"Conversion successful\"\n  upload_to_cdn movie/\nelse\n  echo \"Conversion failed with code $?\"\n  exit 1\nfi\n</code></pre></p>"},{"location":"cli/#environment-variables","title":"Environment Variables","text":""},{"location":"cli/#ffmpeg_binary","title":"<code>FFMPEG_BINARY</code>","text":"<p>Override FFmpeg executable path:</p> <pre><code>export FFMPEG_BINARY=\"/usr/local/bin/ffmpeg\"\nhls-converter movie.mp4\n</code></pre>"},{"location":"cli/#hls_converter_config","title":"<code>HLS_CONVERTER_CONFIG</code>","text":"<p>Default configuration file:</p> <pre><code>export HLS_CONVERTER_CONFIG=\"/etc/hls-converter/default.json\"\nhls-converter movie.mp4  # Uses default config automatically\n</code></pre>"},{"location":"cli/#shell-completion","title":"Shell Completion","text":"<p>Enable tab completion for bash/zsh:</p> <pre><code># Bash\neval \"$(_HLS_CONVERTER_COMPLETE=source hls-converter)\"\n\n# Zsh  \neval \"$(_HLS_CONVERTER_COMPLETE=source_zsh hls-converter)\"\n\n# Add to your shell profile for persistence\necho 'eval \"$(_HLS_CONVERTER_COMPLETE=source hls-converter)\"' &gt;&gt; ~/.bashrc\n</code></pre>"},{"location":"cli/#common-patterns","title":"Common Patterns","text":""},{"location":"cli/#development-workflow","title":"Development Workflow","text":"<pre><code># Quick test conversion\nhls-converter test.mp4 --preset ultrafast --resolutions 720p --quiet\n\n# Production conversion  \nhls-converter final.mp4 --config production.json --output /var/www/streams/\n</code></pre>"},{"location":"cli/#cicd-pipeline","title":"CI/CD Pipeline","text":"<pre><code>#!/bin/bash\nset -e  # Exit on error\n\n# Validate input\nhls-converter \"$1\" --analyze-only --quiet || exit 1\n\n# Convert with error handling\nhls-converter \"$1\" \\\n  --output \"./dist/${1%.*}\" \\\n  --config ci-config.json \\\n  --quiet || {\n    echo \"Conversion failed for $1\" &gt;&amp;2\n    exit 1\n}\n\necho \"Successfully converted $1\"\n</code></pre>"},{"location":"cli/#next-steps","title":"Next Steps","text":"<ul> <li>\ud83d\udcd6 Configuration Guide - Learn about JSON configuration files</li> <li>\ud83c\udfaf Quality Settings - Optimize video quality for your use case</li> <li>\ud83d\udc0d Python API - Integrate conversion into your applications</li> <li>\ud83d\udcbb Batch Processing - Handle multiple files efficiently</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>Thanks for your interest in contributing! This guide explains how to set up your environment, run tests, and submit changes.</p>"},{"location":"contributing/#development-setup","title":"Development Setup","text":"<ul> <li>Python 3.13 (or 3.8+)</li> <li>FFmpeg installed and available in PATH</li> <li>Create and activate a virtual environment, then install dev deps:</li> </ul> <pre><code>pip install -r requirements.txt\npip install -r requirements-docs.txt\n</code></pre>"},{"location":"contributing/#running-tests","title":"Running Tests","text":"<pre><code>pytest -q\n</code></pre>"},{"location":"contributing/#docs","title":"Docs","text":"<pre><code>mkdocs serve\n</code></pre>"},{"location":"contributing/#commit-guidelines","title":"Commit Guidelines","text":"<ul> <li>Keep commits focused and well-described.</li> <li>Include tests where behavior changes.</li> <li>Update docs for user-facing changes.</li> </ul>"},{"location":"contributing/#code-style","title":"Code Style","text":"<ul> <li>Follow PEP8 and use Black/ruff (if configured).</li> </ul>"},{"location":"contributing/#reporting-issues","title":"Reporting Issues","text":"<p>Please include: - OS, Python version, FFmpeg version - Steps to reproduce - Expected vs actual behavior</p>"},{"location":"installation/","title":"Installation","text":"<p>This guide covers all the ways to install HLS Converter on your system.</p>"},{"location":"installation/#system-requirements","title":"System Requirements","text":""},{"location":"installation/#required-software","title":"Required Software","text":"<ul> <li>Python 3.8 or higher</li> <li>FFmpeg 4.0+ with desired encoders</li> <li>FFprobe (usually included with FFmpeg)</li> </ul>"},{"location":"installation/#recommended-system-specs","title":"Recommended System Specs","text":"<ul> <li>RAM: 4GB minimum, 8GB+ recommended for 4K videos</li> <li>CPU: Multi-core processor (4+ cores recommended)</li> <li>Storage: SSD recommended for better I/O performance</li> <li>GPU: Optional, for hardware acceleration support</li> </ul>"},{"location":"installation/#installing-python-dependencies","title":"Installing Python Dependencies","text":""},{"location":"installation/#option-1-install-from-pypi-recommended","title":"Option 1: Install from PyPI (Recommended)","text":"<pre><code>pip install hls-converter\n</code></pre> <p>Virtual Environment Recommended</p> <p>It's recommended to install in a virtual environment to avoid conflicts: <pre><code>python -m venv hls-env\nsource hls-env/bin/activate  # On Windows: hls-env\\Scripts\\activate\npip install hls-converter\n</code></pre></p>"},{"location":"installation/#option-2-install-from-source","title":"Option 2: Install from Source","text":"<p>For the latest development version:</p> <pre><code>git clone https://github.com/marktennyson/hls-converter.git\ncd hls-converter\npip install -e .\n</code></pre>"},{"location":"installation/#option-3-development-installation","title":"Option 3: Development Installation","text":"<p>For contributors and developers:</p> <pre><code>git clone https://github.com/marktennyson/hls-converter.git\ncd hls-converter\npip install -e \".[dev]\"\n</code></pre> <p>This installs additional tools for development:</p> <ul> <li><code>pytest</code> - Testing framework</li> <li><code>black</code> - Code formatting</li> <li><code>isort</code> - Import sorting  </li> <li><code>flake8</code> - Code linting</li> <li><code>mypy</code> - Type checking</li> <li><code>pre-commit</code> - Git hooks</li> </ul>"},{"location":"installation/#installing-ffmpeg","title":"Installing FFmpeg","text":"<p>FFmpeg is required for video processing. Choose your platform:</p> macOSWindowsLinux <p>Using Homebrew (Recommended): <pre><code>brew install ffmpeg\n</code></pre></p> <p>Using MacPorts: <pre><code>sudo port install ffmpeg +universal\n</code></pre></p> <p>Verify Installation: <pre><code>ffmpeg -version\nffprobe -version\n</code></pre></p> <p>Option 1: Download Pre-built Binaries</p> <ol> <li>Download from FFmpeg.org</li> <li>Extract to <code>C:\\ffmpeg</code></li> <li>Add <code>C:\\ffmpeg\\bin</code> to your PATH environment variable</li> <li>Restart your command prompt</li> </ol> <p>Option 2: Using Package Manager</p> <p>With Chocolatey: <pre><code>choco install ffmpeg\n</code></pre></p> <p>With Scoop: <pre><code>scoop install ffmpeg\n</code></pre></p> <p>Verify Installation: <pre><code>ffmpeg -version\nffprobe -version\n</code></pre></p> <p>Ubuntu/Debian: <pre><code>sudo apt update\nsudo apt install ffmpeg\n</code></pre></p> <p>CentOS/RHEL/Fedora: <pre><code># Enable RPM Fusion repository first\nsudo dnf install ffmpeg ffmpeg-devel\n</code></pre></p> <p>Arch Linux: <pre><code>sudo pacman -S ffmpeg\n</code></pre></p> <p>From Source (for latest features): <pre><code>git clone https://git.ffmpeg.org/ffmpeg.git ffmpeg\ncd ffmpeg\n./configure --enable-gpl --enable-libx264 --enable-libx265\nmake -j$(nproc)\nsudo make install\n</code></pre></p> <p>Verify Installation: <pre><code>ffmpeg -version\nffprobe -version\n</code></pre></p>"},{"location":"installation/#hardware-acceleration-setup","title":"Hardware Acceleration Setup","text":"<p>HLS Converter automatically detects available hardware encoders. Here's how to enable them:</p>"},{"location":"installation/#videotoolbox-macos","title":"VideoToolbox (macOS)","text":"<p>VideoToolbox is built into macOS and should work automatically:</p> <pre><code># Check if VideoToolbox is available\nffmpeg -hide_banner -encoders | grep videotoolbox\n</code></pre>"},{"location":"installation/#nvidia-nvenc","title":"NVIDIA NVENC","text":"<p>Requirements: - NVIDIA GPU with NVENC support (GTX 600 series or newer) - Latest NVIDIA drivers</p> <p>Installation: <pre><code># Most FFmpeg builds include NVENC support\nffmpeg -hide_banner -encoders | grep nvenc\n</code></pre></p>"},{"location":"installation/#intel-quicksync-qsv","title":"Intel QuickSync (QSV)","text":"<p>Requirements: - Intel CPU with integrated graphics - Intel Media SDK or oneVPL</p> <p>Linux Setup: <pre><code># Install Intel Media SDK\nsudo apt install intel-media-va-driver-non-free\n</code></pre></p>"},{"location":"installation/#amd-amf-windows-only","title":"AMD AMF (Windows only)","text":"<p>Requirements: - AMD GPU with VCE support - AMD drivers</p> <p>Check Availability: <pre><code>ffmpeg -hide_banner -encoders | grep amf\n</code></pre></p>"},{"location":"installation/#verification","title":"Verification","text":"<p>After installation, verify everything works:</p>"},{"location":"installation/#1-test-python-package","title":"1. Test Python Package","text":"<pre><code>python -c \"import hls_converter; print('\u2705 HLS Converter imported successfully')\"\n</code></pre>"},{"location":"installation/#2-test-cli","title":"2. Test CLI","text":"<pre><code>hls-converter --version\nhls-converter --help\n</code></pre>"},{"location":"installation/#3-test-encoder-detection","title":"3. Test Encoder Detection","text":"<pre><code>hls-converter --list-encoders\n</code></pre> <p>Expected output should show available encoders: <pre><code>Available Encoders\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 Type  \u2503 Category \u2503 Codec             \u2503 Name                     \u2503 Selected \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 Video \u2502 Hardware \u2502 h264_videotoolbox \u2502 VideoToolbox (macOS)     \u2502 \u2705       \u2502\n\u2502 Video \u2502 Software \u2502 libx264           \u2502 x264 Software            \u2502          \u2502\n\u2502 Audio \u2502 Hardware \u2502 aac_at            \u2502 AudioToolbox AAC (macOS) \u2502 \u2705       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre></p>"},{"location":"installation/#4-run-installation-test","title":"4. Run Installation Test","text":"<pre><code>python test_installation.py\n</code></pre> <p>This runs comprehensive tests to ensure everything is working correctly.</p>"},{"location":"installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"installation/#common-issues","title":"Common Issues","text":"FFmpeg not found <p>Error: <code>FileNotFoundError: [Errno 2] No such file or directory: 'ffmpeg'</code></p> <p>Solution: 1. Verify FFmpeg is installed: <code>ffmpeg -version</code> 2. Check if FFmpeg is in PATH: <code>which ffmpeg</code> (Unix) or <code>where ffmpeg</code> (Windows) 3. Restart terminal/command prompt after installation 4. On Windows, ensure FFmpeg bin directory is in PATH environment variable</p> Permission denied errors <p>Error: <code>PermissionError: [Errno 13] Permission denied</code></p> <p>Solutions: 1. Use virtual environment: <code>python -m venv venv &amp;&amp; source venv/bin/activate</code> 2. Install with <code>--user</code> flag: <code>pip install --user hls-converter</code> 3. On Linux/macOS, avoid using <code>sudo</code> with pip</p> Hardware encoders not detected <p>Issue: Only software encoders are available</p> <p>Solutions: 1. Update GPU drivers to latest version 2. Verify GPU supports hardware encoding 3. Check FFmpeg was compiled with hardware support:    <pre><code>ffmpeg -hide_banner -encoders | grep -i nvenc  # NVIDIA\nffmpeg -hide_banner -encoders | grep -i videotoolbox  # macOS\nffmpeg -hide_banner -encoders | grep -i qsv  # Intel\n</code></pre></p> Import errors after installation <p>Error: <code>ModuleNotFoundError: No module named 'hls_converter'</code></p> <p>Solutions: 1. Verify installation: <code>pip list | grep hls-converter</code> 2. Check Python version: <code>python --version</code> (requires 3.8+) 3. If using virtual environment, ensure it's activated 4. Try reinstalling: <code>pip uninstall hls-converter &amp;&amp; pip install hls-converter</code></p> Slow conversion performance <p>Issues: Conversion is slower than expected</p> <p>Solutions: 1. Enable hardware acceleration (check <code>--list-encoders</code>) 2. Use faster preset: <code>--preset ultrafast</code> 3. Reduce parallel workers if system is constrained: <code>--workers 2</code> 4. Convert to SSD storage instead of network drives 5. Close other resource-intensive applications</p>"},{"location":"installation/#getting-help","title":"Getting Help","text":"<p>If you're still having issues:</p> <ol> <li>Check the logs with <code>--debug</code> flag for detailed error information</li> <li>Search existing issues on GitHub Issues</li> <li>Create a new issue with:</li> <li>Your operating system and version</li> <li>Python version (<code>python --version</code>)</li> <li>FFmpeg version (<code>ffmpeg -version</code>)  </li> <li>Complete error message</li> <li>Steps to reproduce the problem</li> </ol>"},{"location":"installation/#next-steps","title":"Next Steps","text":"<p>Once installation is complete:</p> <ul> <li>\ud83d\udcda Quick Start Guide - Convert your first video</li> <li>\u2699\ufe0f Configuration - Customize settings</li> <li>\ud83d\udd27 CLI Reference - Explore all options</li> <li>\ud83d\udc0d Python API - Integrate into your code</li> </ul>"},{"location":"license/","title":"License","text":"<p>HLS Converter is released under the MIT License.</p>"},{"location":"license/#mit-license","title":"MIT License","text":"<pre><code>Copyright (c) 2024 HLS Converter Team\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre>"},{"location":"license/#what-this-means","title":"What This Means","text":"<p>The MIT License is a permissive license that allows you to:</p>"},{"location":"license/#permitted-uses","title":"\u2705 Permitted Uses","text":"<ul> <li>Commercial Use: Use the software for commercial purposes</li> <li>Distribution: Distribute copies of the software</li> <li>Modification: Modify the software for your needs</li> <li>Private Use: Use the software privately</li> <li>Patent Grant: Use any patents granted by contributors</li> </ul>"},{"location":"license/#requirements","title":"\ud83d\udccb Requirements","text":"<ul> <li>License Notice: Include the original license in your distributions</li> <li>Copyright Notice: Include the original copyright notice</li> </ul>"},{"location":"license/#limitations","title":"\u274c Limitations","text":"<ul> <li>No Warranty: The software is provided \"as is\" without warranty</li> <li>No Liability: Authors are not liable for damages</li> <li>No Trademark Rights: The license doesn't grant trademark rights</li> </ul>"},{"location":"license/#third-party-dependencies","title":"Third-Party Dependencies","text":"<p>HLS Converter depends on several open-source libraries, each with their own licenses:</p>"},{"location":"license/#python-dependencies","title":"Python Dependencies","text":"Package License Purpose Rich MIT Console formatting and progress bars"},{"location":"license/#external-dependencies","title":"External Dependencies","text":"Software License Purpose FFmpeg LGPL/GPL Video processing and encoding <p>FFmpeg Licensing</p> <p>FFmpeg is licensed under LGPL 2.1+ or GPL 2+, depending on configuration. If you distribute FFmpeg with additional codecs or use GPL components, your distribution may need to comply with GPL requirements.</p>"},{"location":"license/#contributing","title":"Contributing","text":"<p>By contributing to HLS Converter, you agree that your contributions will be licensed under the MIT License. See our Contributing Guide for details.</p>"},{"location":"license/#questions","title":"Questions?","text":"<p>If you have questions about licensing:</p> <ul> <li>Review the MIT License FAQ</li> <li>Check our GitHub Issues for license discussions</li> <li>Contact the maintainers for specific licensing questions</li> </ul>"},{"location":"quickstart/","title":"Quick Start","text":"<p>Get up and running with HLS Converter in 5 minutes! This guide will walk you through your first video conversion.</p>"},{"location":"quickstart/#prerequisites","title":"Prerequisites","text":"<p>Make sure you have completed the installation:</p> <ul> <li>\u2705 Python 3.8+</li> <li>\u2705 HLS Converter installed (<code>pip install hls-converter</code>)</li> <li>\u2705 FFmpeg installed and in PATH</li> </ul>"},{"location":"quickstart/#your-first-conversion","title":"Your First Conversion","text":""},{"location":"quickstart/#step-1-check-your-setup","title":"Step 1: Check Your Setup","text":"<p>Verify everything is working:</p> <pre><code>hls-converter --version\n</code></pre> <p>Expected output: <pre><code>hls-converter 1.0.0\n</code></pre></p>"},{"location":"quickstart/#step-2-check-available-encoders","title":"Step 2: Check Available Encoders","text":"<p>See what hardware acceleration is available:</p> <pre><code>hls-converter --list-encoders\n</code></pre> <p>This will show you the best encoders HLS Converter detected on your system.</p>"},{"location":"quickstart/#step-3-convert-your-first-video","title":"Step 3: Convert Your First Video","text":"Basic ConversionCustom Output DirectorySpecific Resolutions <p>Convert a video with automatic optimization:</p> <pre><code>hls-converter input.mp4\n</code></pre> <p>This will: - \ud83d\udcca Analyze your video automatically - \ud83c\udfaf Choose optimal resolution ladder - \u26a1 Use hardware acceleration if available - \ud83d\udcc1 Output to folder named <code>input/</code> (same as filename)</p> <p>Specify where to save the HLS files:</p> <pre><code>hls-converter input.mp4 --output streaming_output\n</code></pre> <p>Choose which quality levels to generate:</p> <pre><code>hls-converter input.mp4 --resolutions 720p,1080p\n</code></pre>"},{"location":"quickstart/#step-4-verify-the-output","title":"Step 4: Verify the Output","text":"<p>After conversion completes, you'll see output like:</p> <pre><code>\ud83c\udf89 All stream processing completed!\n\n\ud83d\udcca Conversion Results\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 Metric                \u2503 Value           \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 Total Processing Time \u2502 45.3s           \u2502\n\u2502 Processing Speed      \u2502 12.34 MB/s      \u2502\n\u2502 Video Resolutions     \u2502 3               \u2502\n\u2502 Audio Tracks         \u2502 1               \u2502\n\u2502 Master Playlist      \u2502 output/master.m3u8 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Check your output directory:</p> <pre><code>ls -la output/\n</code></pre> <p>You should see: <pre><code>output/\n\u251c\u2500\u2500 master.m3u8          # \u2190 Main playlist file\n\u251c\u2500\u2500 720p/\n\u2502   \u251c\u2500\u2500 playlist.m3u8\n\u2502   \u251c\u2500\u2500 chunk_000.ts\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 1080p/\n\u2502   \u251c\u2500\u2500 playlist.m3u8  \n\u2502   \u251c\u2500\u2500 chunk_000.ts\n\u2502   \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 audio_english/\n    \u251c\u2500\u2500 playlist.m3u8\n    \u2514\u2500\u2500 ...\n</code></pre></p>"},{"location":"quickstart/#testing-your-hls-stream","title":"Testing Your HLS Stream","text":""},{"location":"quickstart/#option-1-online-hls-player","title":"Option 1: Online HLS Player","text":"<p>Upload your <code>master.m3u8</code> to any web server and test with online players:</p> <ul> <li>HLS.js Demo</li> <li>Video.js HLS</li> </ul>"},{"location":"quickstart/#option-2-local-testing-with-python","title":"Option 2: Local Testing with Python","text":"<p>Create a simple test server:</p> <pre><code># Navigate to your output directory\ncd output\n\n# Start a local server (Python 3)\npython -m http.server 8000\n\n# Open http://localhost:8000/master.m3u8 in a compatible player\n</code></pre>"},{"location":"quickstart/#option-3-vlc-player","title":"Option 3: VLC Player","text":"<p>VLC can play HLS streams directly:</p> <ol> <li>Open VLC</li> <li>Go to Media \u2192 Open Network Stream</li> <li>Enter: <code>file:///path/to/your/output/master.m3u8</code></li> <li>Click Play</li> </ol>"},{"location":"quickstart/#common-first-time-scenarios","title":"Common First-Time Scenarios","text":""},{"location":"quickstart/#mobile-optimized-streaming","title":"Mobile-Optimized Streaming","text":"<p>For mobile apps or poor connections:</p> <pre><code>hls-converter input.mp4 \\\n  --resolutions 240p,360p,480p,720p \\\n  --segment-duration 2 \\\n  --preset fast\n</code></pre>"},{"location":"quickstart/#high-quality-web-streaming","title":"High-Quality Web Streaming","text":"<p>For desktop web players with good connections:</p> <pre><code>hls-converter input.mp4 \\\n  --resolutions 720p,1080p,1440p \\\n  --segment-duration 6 \\\n  --preset medium\n</code></pre>"},{"location":"quickstart/#batch-processing","title":"Batch Processing","text":"<p>Convert multiple videos:</p> <pre><code># Convert all MP4 files in current directory\nfor file in *.mp4; do\n  hls-converter \"$file\" --output \"hls_${file%.mp4}\"\ndone\n</code></pre>"},{"location":"quickstart/#understanding-the-output","title":"Understanding the Output","text":""},{"location":"quickstart/#master-playlist-masterm3u8","title":"Master Playlist (<code>master.m3u8</code>)","text":"<p>This is the main entry point for HLS players. It references all quality levels:</p> <pre><code>#EXTM3U\n#EXT-X-MEDIA:TYPE=AUDIO,GROUP-ID=\"audio\",NAME=\"english\",DEFAULT=YES,AUTOSELECT=YES,LANGUAGE=\"english\",URI=\"audio_english/playlist.m3u8\"\n#EXT-X-STREAM-INF:BANDWIDTH=2500000,RESOLUTION=1280x720,CODECS=\"avc1.640029\",AUDIO=\"audio\"\n720p/playlist.m3u8\n#EXT-X-STREAM-INF:BANDWIDTH=5000000,RESOLUTION=1920x1080,CODECS=\"avc1.640029\",AUDIO=\"audio\"\n1080p/playlist.m3u8\n</code></pre>"},{"location":"quickstart/#quality-specific-playlists","title":"Quality-Specific Playlists","text":"<p>Each resolution has its own playlist (<code>720p/playlist.m3u8</code>):</p> <pre><code>#EXTM3U\n#EXT-X-VERSION:3\n#EXT-X-TARGETDURATION:2\n#EXT-X-MEDIA-SEQUENCE:0\n#EXT-X-PLAYLIST-TYPE:VOD\n#EXTINF:2.000000,\nchunk_000.ts\n#EXTINF:2.000000,\nchunk_001.ts\n#EXT-X-ENDLIST\n</code></pre>"},{"location":"quickstart/#video-segments","title":"Video Segments","text":"<p>The actual video data is stored in <code>.ts</code> (Transport Stream) files, typically 2-6 seconds each.</p>"},{"location":"quickstart/#quick-tips","title":"Quick Tips","text":"<p>Performance</p> <ul> <li>Hardware acceleration can be 5-10x faster than software encoding</li> <li>Use <code>--preset ultrafast</code> for fastest conversion (lower quality)</li> <li>Use <code>--preset slow</code> for best quality (slower conversion)</li> </ul> <p>Quality</p> <ul> <li>Let HLS Converter choose resolutions automatically for best results</li> <li>For 4K source videos, include 1080p and 720p for compatibility</li> <li>Shorter segments (2s) = better seeking, longer segments (6s) = better compression</li> </ul> <p>Storage</p> <ul> <li>HLS files are typically 1.5-2x larger than original due to multiple resolutions</li> <li>Consider 2-4 quality levels as optimal balance of quality vs storage</li> </ul>"},{"location":"quickstart/#troubleshooting-quick-fixes","title":"Troubleshooting Quick Fixes","text":"Conversion is very slow <pre><code># Use hardware encoding and faster preset\nhls-converter input.mp4 --preset ultrafast --workers 4\n\n# Check if hardware acceleration is working\nhls-converter --list-encoders\n</code></pre> Output quality is poor <pre><code># Use better quality preset\nhls-converter input.mp4 --preset medium --crf 20\n</code></pre> File too large <pre><code># Reduce number of quality levels\nhls-converter input.mp4 --resolutions 720p,1080p\n</code></pre> Player won't load stream <ul> <li>Verify <code>master.m3u8</code> exists and is not empty</li> <li>Check that segment files (<code>.ts</code>) exist in quality folders</li> <li>Ensure web server serves <code>.m3u8</code> with correct MIME type (<code>application/x-mpegURL</code>)</li> </ul>"},{"location":"quickstart/#next-steps","title":"Next Steps","text":"<p>Now that you've successfully converted your first video:</p> <ul> <li>\ud83d\udcd6 Learn more CLI options for advanced control</li> <li>\u2699\ufe0f Configure custom settings for your workflow  </li> <li>\ud83d\udc0d Use the Python API to integrate into applications</li> <li>\ud83c\udfaf Optimize video quality for your specific needs</li> <li>\ud83d\udcbb Set up batch processing for multiple files</li> </ul>"},{"location":"quickstart/#example-projects","title":"Example Projects","text":"<p>Here are some real-world examples to inspire your next steps:</p> <p>Video Streaming Website</p> <pre><code># Convert user uploads for adaptive streaming\nfrom hls_converter import HLSConverter\n\ndef process_upload(video_file, user_id, video_id):\n    converter = HLSConverter()\n    output_dir = f\"cdn/{user_id}/{video_id}\"\n\n    results = converter.convert(video_file, output_dir)\n\n    # Save playlist URL to database\n    save_to_db(video_id, results['master_playlist'])\n    return results['master_playlist']\n</code></pre> <p>Mobile App Backend</p> <pre><code># Optimize for mobile viewing\nfrom hls_converter import HLSConverter, HLSConfig\n\nconfig = HLSConfig(\n    segment_duration=2,  # Better for mobile networks\n    preset='fast',       # Faster processing\n)\n\nconverter = HLSConverter(config)\nresults = converter.convert(\n    'content.mp4', \n    'mobile_streams',\n    ['240p', '360p', '720p']  # Mobile-friendly resolutions\n)\n</code></pre>"},{"location":"api/","title":"API Reference","text":"<p>The HLS Converter Python API provides a clean, object-oriented interface for integrating video conversion into your applications. This section covers all classes, methods, and configuration options.</p>"},{"location":"api/#overview","title":"Overview","text":"<p>The API is designed around these core concepts:</p> <ul> <li>HLSConverter: Main orchestrator class that handles the conversion process</li> <li>HLSConfig: Configuration management with bitrate profiles and settings</li> <li>MediaAnalyzer: Analyzes input video characteristics  </li> <li>EncoderDetector: Detects available hardware and software encoders</li> </ul>"},{"location":"api/#quick-api-example","title":"Quick API Example","text":"<pre><code>from hls_converter import HLSConverter, HLSConfig\n\n# Basic conversion\nconverter = HLSConverter()\nresults = converter.convert('input.mp4', 'output_directory')\n\n# Custom configuration\nconfig = HLSConfig(\n    segment_duration=4,\n    preset='medium',\n    max_workers=6\n)\nconverter = HLSConverter(config)\nresults = converter.convert('input.mp4', 'output_dir', ['720p', '1080p'])\n</code></pre>"},{"location":"api/#core-classes","title":"Core Classes","text":""},{"location":"api/#hlsconverter","title":"HLSConverter","text":"<p>Professional HLS converter with automatic optimization and hardware acceleration.</p> <p>Features: - Automatic encoder detection and hardware acceleration - Dynamic bitrate adjustment based on input video characteristics - Multi-threaded parallel processing - Comprehensive logging and progress tracking - Subtitle conversion support</p> <p>Initialize HLS converter.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>Optional[HLSConfig]</code> <p>Optional HLS configuration. If None, uses default configuration.</p> <code>None</code> <p>Key Methods:</p> <ul> <li><code>convert()</code> - Main conversion method</li> <li><code>media_analyzer</code> - Access to media analysis functionality  </li> <li><code>encoder_detector</code> - Access to encoder detection</li> </ul> <p>Example Usage: <pre><code>from hls_converter import HLSConverter\n\nconverter = HLSConverter()\n\n# Convert with automatic settings\nresults = converter.convert('movie.mp4', 'hls_output')\n\n# Convert specific resolutions\nresults = converter.convert('movie.mp4', 'hls_output', ['720p', '1080p'])\n\n# Access conversion results\nprint(f\"Master playlist: {results['master_playlist']}\")\nprint(f\"Processing time: {results['total_duration']:.1f}s\")\nprint(f\"Speed: {results['processing_speed_mbps']:.2f} MB/s\")\n</code></pre></p>"},{"location":"api/#hls_converter.converter.HLSConverter.convert","title":"convert","text":"<pre><code>convert(input_file: str | Path, output_dir: str | Path, resolutions: Optional[List[str]] = None) -&gt; Dict[str, Any]\n</code></pre> <p>Convert video to HLS format with adaptive bitrate streaming.</p> <p>Parameters:</p> Name Type Description Default <code>input_file</code> <code>str | Path</code> <p>Path to input video file</p> required <code>output_dir</code> <code>str | Path</code> <p>Directory to output HLS files</p> required <code>resolutions</code> <code>Optional[List[str]]</code> <p>Optional list of resolutions to generate (e.g., [\"720p\", \"1080p\"])         If None, automatically determines based on input video</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing conversion results and statistics</p>"},{"location":"api/#hlsconfig","title":"HLSConfig","text":"<p>Main configuration class for HLS Converter.</p> <p>Configuration Options:</p> Parameter Type Default Description <code>segment_duration</code> <code>int</code> <code>2</code> HLS segment duration in seconds <code>playlist_type</code> <code>str</code> <code>\"vod\"</code> HLS playlist type <code>gop_size</code> <code>int</code> <code>48</code> Group of Pictures size <code>max_workers</code> <code>int</code> <code>None</code> Number of parallel workers (auto-detect if None) <code>preset</code> <code>str</code> <code>\"fast\"</code> Encoding preset <code>crf</code> <code>int</code> <code>23</code> Constant Rate Factor for software encoding <code>convert_subtitles</code> <code>bool</code> <code>True</code> Whether to convert subtitles <code>skip_bitmap_subtitles</code> <code>bool</code> <code>True</code> Skip bitmap subtitle formats <p>Example Usage: <pre><code>from hls_converter import HLSConfig\n\n# Create custom configuration\nconfig = HLSConfig(\n    segment_duration=6,        # 6-second segments\n    preset='medium',           # Better quality\n    crf=20,                   # Higher quality\n    max_workers=4,            # 4 parallel workers\n    convert_subtitles=True    # Include subtitles\n)\n\n# Load from JSON file\nwith open('config.json', 'r') as f:\n    config_dict = json.load(f)\nconfig = HLSConfig.from_dict(config_dict)\n\n# Save to JSON file  \nconfig_dict = config.to_dict()\nwith open('config.json', 'w') as f:\n    json.dump(config_dict, f, indent=2)\n</code></pre></p>"},{"location":"api/#hls_converter.config.HLSConfig.create_adaptive_profiles","title":"create_adaptive_profiles  <code>classmethod</code>","text":"<pre><code>create_adaptive_profiles(input_width: int, input_height: int, input_bitrate: Optional[int] = None) -&gt; List[BitrateProfile]\n</code></pre> <p>Create adaptive bitrate profiles based on input video characteristics.</p> <p>Parameters:</p> Name Type Description Default <code>input_width</code> <code>int</code> <p>Input video width</p> required <code>input_height</code> <code>int</code> <p>Input video height  </p> required <code>input_bitrate</code> <code>Optional[int]</code> <p>Input video bitrate in kbps (optional)</p> <code>None</code> <p>Returns:</p> Type Description <code>List[BitrateProfile]</code> <p>List of BitrateProfile objects suitable for the input video</p>"},{"location":"api/#hls_converter.config.HLSConfig.get_encoder_specific_args","title":"get_encoder_specific_args","text":"<pre><code>get_encoder_specific_args(encoder: str) -&gt; List[str]\n</code></pre> <p>Get encoder-specific FFmpeg arguments.</p>"},{"location":"api/#hls_converter.config.HLSConfig.to_dict","title":"to_dict","text":"<pre><code>to_dict() -&gt; Dict\n</code></pre> <p>Convert configuration to dictionary.</p>"},{"location":"api/#hls_converter.config.HLSConfig.from_dict","title":"from_dict  <code>classmethod</code>","text":"<pre><code>from_dict(config_dict: Dict) -&gt; HLSConfig\n</code></pre> <p>Create configuration from dictionary.</p>"},{"location":"api/#bitrateprofile","title":"BitrateProfile","text":"<p>Bitrate profile for different video resolutions.</p> <p>Creating Custom Profiles: <pre><code>from hls_converter.config import BitrateProfile, HLSConfig\n\n# Create custom bitrate profiles\nprofiles = [\n    BitrateProfile(\"low\", (640, 360), 800, 600),      # Low quality\n    BitrateProfile(\"medium\", (1280, 720), 2000, 1500), # Medium quality\n    BitrateProfile(\"high\", (1920, 1080), 4000, 3000),  # High quality\n]\n\nconfig = HLSConfig(bitrate_profiles=profiles)\n</code></pre></p>"},{"location":"api/#hls_converter.config.BitrateProfile.scale_filter","title":"scale_filter  <code>property</code>","text":"<pre><code>scale_filter: str\n</code></pre> <p>FFmpeg scale filter string.</p>"},{"location":"api/#hls_converter.config.BitrateProfile.resolution_name","title":"resolution_name  <code>property</code>","text":"<pre><code>resolution_name: str\n</code></pre> <p>Human-readable resolution name.</p>"},{"location":"api/#mediaanalyzer","title":"MediaAnalyzer","text":"<p>Analyzes media files using FFprobe.</p> <p>Usage Example: <pre><code>from hls_converter.media_analyzer import MediaAnalyzer\nfrom pathlib import Path\n\nanalyzer = MediaAnalyzer()\nmedia_info = analyzer.analyze(Path('video.mp4'))\n\n# Access video information\nif media_info.video:\n    print(f\"Resolution: {media_info.video.width}x{media_info.video.height}\")\n    print(f\"Duration: {media_info.video.duration:.1f}s\")\n    print(f\"FPS: {media_info.video.fps:.1f}\")\n    print(f\"Bitrate: {media_info.video.bitrate}kbps\")\n\n# Access audio tracks\nfor track in media_info.audio_tracks:\n    print(f\"Audio: {track.language} ({track.codec})\")\n\n# Access subtitle tracks\nfor track in media_info.subtitle_tracks:\n    print(f\"Subtitle: {track.language} ({track.codec})\")\n</code></pre></p>"},{"location":"api/#hls_converter.media_analyzer.MediaAnalyzer.analyze","title":"analyze","text":"<pre><code>analyze(input_file: Path) -&gt; MediaInfo\n</code></pre> <p>Analyze a media file and return comprehensive information.</p> <p>Parameters:</p> Name Type Description Default <code>input_file</code> <code>Path</code> <p>Path to the media file to analyze</p> required <p>Returns:</p> Type Description <code>MediaInfo</code> <p>MediaInfo object containing all relevant information</p>"},{"location":"api/#hls_converter.media_analyzer.MediaAnalyzer.get_optimal_resolutions","title":"get_optimal_resolutions","text":"<pre><code>get_optimal_resolutions(video_info: VideoInfo) -&gt; List[str]\n</code></pre> <p>Determine optimal resolution ladder based on input video.</p> <p>Parameters:</p> Name Type Description Default <code>video_info</code> <code>VideoInfo</code> <p>Video information from analysis</p> required <p>Returns:</p> Type Description <code>List[str]</code> <p>List of resolution names suitable for the input video</p>"},{"location":"api/#encoderdetector","title":"EncoderDetector","text":"<p>Detects and manages available video and audio encoders.</p> <p>Usage Example: <pre><code>from hls_converter.encoder_detector import EncoderDetector\n\ndetector = EncoderDetector()\nencoder_info = detector.detect_encoders()\n\n# Get best encoders\nvideo_encoder, video_name = detector.get_best_video_encoder()\naudio_encoder, audio_name = detector.get_best_audio_encoder()\n\nprint(f\"Video encoder: {video_name}\")\nprint(f\"Audio encoder: {audio_name}\")\n\n# Check if hardware encoding is available\nis_hardware = detector.is_hardware_encoder(video_encoder)\nprint(f\"Hardware acceleration: {is_hardware}\")\n</code></pre></p>"},{"location":"api/#hls_converter.encoder_detector.EncoderDetector.detect_encoders","title":"detect_encoders","text":"<pre><code>detect_encoders(force_refresh: bool = False) -&gt; Dict[str, Dict]\n</code></pre> <p>Detect all available encoders.</p> <p>Parameters:</p> Name Type Description Default <code>force_refresh</code> <code>bool</code> <p>Force re-detection even if cached results exist</p> <code>False</code> <p>Returns:</p> Type Description <code>Dict[str, Dict]</code> <p>Dictionary containing video and audio encoder information</p>"},{"location":"api/#hls_converter.encoder_detector.EncoderDetector.get_best_video_encoder","title":"get_best_video_encoder","text":"<pre><code>get_best_video_encoder() -&gt; Tuple[str, str]\n</code></pre> <p>Get the best available video encoder.</p>"},{"location":"api/#hls_converter.encoder_detector.EncoderDetector.get_best_audio_encoder","title":"get_best_audio_encoder","text":"<pre><code>get_best_audio_encoder() -&gt; Tuple[str, str]\n</code></pre> <p>Get the best available audio encoder.</p>"},{"location":"api/#hls_converter.encoder_detector.EncoderDetector.is_hardware_encoder","title":"is_hardware_encoder","text":"<pre><code>is_hardware_encoder(encoder: str) -&gt; bool\n</code></pre> <p>Check if an encoder is hardware-accelerated.</p>"},{"location":"api/#hls_converter.encoder_detector.EncoderDetector.get_encoder_info","title":"get_encoder_info","text":"<pre><code>get_encoder_info() -&gt; Dict\n</code></pre> <p>Get detailed information about detected encoders.</p>"},{"location":"api/#data-classes","title":"Data Classes","text":""},{"location":"api/#videoinfo","title":"VideoInfo","text":"<p>Information about video streams:</p> <pre><code>@dataclass\nclass VideoInfo:\n    width: int              # Video width in pixels\n    height: int             # Video height in pixels  \n    duration: float         # Duration in seconds\n    fps: float             # Frames per second\n    bitrate: Optional[int]  # Bitrate in kbps\n    codec: Optional[str]    # Video codec name\n</code></pre>"},{"location":"api/#audiotrack","title":"AudioTrack","text":"<p>Information about audio tracks:</p> <pre><code>@dataclass\nclass AudioTrack:\n    index: int                    # Track index\n    language: str                 # Language code\n    codec: Optional[str]          # Audio codec\n    bitrate: Optional[int]        # Bitrate in kbps\n    sample_rate: Optional[int]    # Sample rate in Hz\n    channels: Optional[int]       # Number of channels\n</code></pre>"},{"location":"api/#subtitletrack","title":"SubtitleTrack","text":"<p>Information about subtitle tracks:</p> <pre><code>@dataclass\nclass SubtitleTrack:\n    index: int        # Track index\n    language: str     # Language code\n    codec: str        # Subtitle codec\n</code></pre>"},{"location":"api/#advanced-usage","title":"Advanced Usage","text":""},{"location":"api/#custom-bitrate-profiles","title":"Custom Bitrate Profiles","text":"<p>Create profiles based on input video characteristics:</p> <pre><code>from hls_converter import HLSConfig\n\n# Analyze input video first\nconverter = HLSConverter()\nmedia_info = converter.media_analyzer.analyze(Path('input.mp4'))\n\nif media_info.video:\n    # Create adaptive profiles\n    profiles = HLSConfig.create_adaptive_profiles(\n        media_info.video.width,\n        media_info.video.height,\n        media_info.video.bitrate\n    )\n\n    config = HLSConfig(bitrate_profiles=profiles)\n    converter = HLSConverter(config)\n</code></pre>"},{"location":"api/#progress-monitoring","title":"Progress Monitoring","text":"<p>Monitor conversion progress with callbacks:</p> <pre><code>import time\nfrom hls_converter import HLSConverter\n\ndef progress_callback(step, progress, eta=None):\n    print(f\"Step: {step}, Progress: {progress:.1f}%\", end=\"\")\n    if eta:\n        print(f\", ETA: {eta}\")\n    else:\n        print()\n\n# Note: Callback support may be added in future versions\nconverter = HLSConverter()\nresults = converter.convert('input.mp4', 'output')\n</code></pre>"},{"location":"api/#error-handling","title":"Error Handling","text":"<p>Handle conversion errors gracefully:</p> <pre><code>from hls_converter import HLSConverter\nfrom hls_converter.exceptions import ConversionError, EncoderError\n\ntry:\n    converter = HLSConverter()\n    results = converter.convert('input.mp4', 'output')\n\n    if results['success']:\n        print(f\"\u2705 Conversion completed: {results['master_playlist']}\")\n    else:\n        print(\"\u274c Conversion failed\")\n\nexcept FileNotFoundError:\n    print(\"\u274c Input file not found\")\nexcept ConversionError as e:\n    print(f\"\u274c Conversion error: {e}\")\nexcept EncoderError as e:\n    print(f\"\u274c Encoder error: {e}\")\nexcept Exception as e:\n    print(f\"\u274c Unexpected error: {e}\")\n</code></pre>"},{"location":"api/#batch-processing","title":"Batch Processing","text":"<p>Process multiple files efficiently:</p> <pre><code>from pathlib import Path\nfrom concurrent.futures import ThreadPoolExecutor\nfrom hls_converter import HLSConverter\n\ndef convert_video(video_file, output_base):\n    converter = HLSConverter()\n    output_dir = output_base / video_file.stem\n\n    try:\n        results = converter.convert(video_file, output_dir)\n        return {'file': video_file.name, 'success': True, 'playlist': results['master_playlist']}\n    except Exception as e:\n        return {'file': video_file.name, 'success': False, 'error': str(e)}\n\n# Process videos in parallel\nvideo_files = list(Path('input_videos').glob('*.mp4'))\noutput_base = Path('hls_output')\n\nwith ThreadPoolExecutor(max_workers=2) as executor:\n    futures = [\n        executor.submit(convert_video, video_file, output_base)\n        for video_file in video_files\n    ]\n\n    for future in futures:\n        result = future.result()\n        if result['success']:\n            print(f\"\u2705 {result['file']}: {result['playlist']}\")\n        else:\n            print(f\"\u274c {result['file']}: {result['error']}\")\n</code></pre>"},{"location":"api/#integration-with-web-frameworks","title":"Integration with Web Frameworks","text":""},{"location":"api/#flask-integration","title":"Flask Integration","text":"<pre><code>from flask import Flask, request, jsonify\nfrom hls_converter import HLSConverter\nimport uuid\n\napp = Flask(__name__)\nconverter = HLSConverter()\n\n@app.route('/convert', methods=['POST'])\ndef convert_video():\n    if 'video' not in request.files:\n        return jsonify({'error': 'No video file'}), 400\n\n    video_file = request.files['video']\n    video_id = str(uuid.uuid4())\n\n    # Save uploaded file\n    input_path = f'uploads/{video_id}.mp4'\n    video_file.save(input_path)\n\n    # Convert to HLS\n    output_dir = f'streams/{video_id}'\n    results = converter.convert(input_path, output_dir)\n\n    return jsonify({\n        'video_id': video_id,\n        'master_playlist': results['master_playlist'],\n        'duration': results['total_duration']\n    })\n</code></pre>"},{"location":"api/#django-integration","title":"Django Integration","text":"<pre><code>from django.http import JsonResponse\nfrom django.views import View\nfrom hls_converter import HLSConverter\n\nclass VideoConvertView(View):\n    def post(self, request):\n        converter = HLSConverter()\n\n        video_file = request.FILES.get('video')\n        if not video_file:\n            return JsonResponse({'error': 'No video file'}, status=400)\n\n        # Process video\n        results = converter.convert(video_file.temporary_file_path(), 'media/streams/')\n\n        return JsonResponse({\n            'success': True,\n            'playlist': results['master_playlist'],\n            'processing_time': results['total_duration']\n        })\n</code></pre>"},{"location":"api/#api-best-practices","title":"API Best Practices","text":""},{"location":"api/#resource-management","title":"Resource Management","text":"<pre><code># Use context managers when available (future feature)\nwith HLSConverter() as converter:\n    results = converter.convert('input.mp4', 'output')\n\n# Current best practice: reuse converter instances\nconverter = HLSConverter()\nfor video_file in video_files:\n    results = converter.convert(video_file, f'output_{video_file.stem}')\n</code></pre>"},{"location":"api/#configuration-management","title":"Configuration Management","text":"<pre><code># Store configuration in environment/config files\nimport os\nfrom hls_converter import HLSConfig\n\nconfig = HLSConfig(\n    segment_duration=int(os.getenv('HLS_SEGMENT_DURATION', '4')),\n    preset=os.getenv('HLS_PRESET', 'medium'),\n    max_workers=int(os.getenv('HLS_MAX_WORKERS', '4'))\n)\n\nconverter = HLSConverter(config)\n</code></pre>"},{"location":"api/#performance-optimization","title":"Performance Optimization","text":"<pre><code># For high-throughput scenarios\nfrom hls_converter import HLSConverter, HLSConfig\n\n# Use hardware encoding when available\nconfig = HLSConfig(\n    preset='fast',           # Faster encoding\n    max_workers=2,          # Limit workers to avoid memory issues\n    segment_duration=6      # Longer segments for better compression\n)\n\nconverter = HLSConverter(config)\n</code></pre>"},{"location":"api/#next-steps","title":"Next Steps","text":"<ul> <li>\ud83d\udcd6 Configuration Guide - Deep dive into configuration options</li> <li>\ud83c\udfaf Quality Settings - Optimize video quality settings</li> <li>\ud83d\udd27 Advanced Topics - Custom profiles and integration patterns</li> <li>\ud83c\udfd7\ufe0f Architecture - Understanding the internal architecture</li> </ul>"}]}